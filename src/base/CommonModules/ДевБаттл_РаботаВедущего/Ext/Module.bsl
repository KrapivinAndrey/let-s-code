Процедура УказатьСостояниеИгроков(СостояниеИгроков, КоличествоИгроков = 2) Экспорт
	
	Набор = РегистрыСведений.ДевБаттл_ТекущееСостояниеИгрока.СоздатьНаборЗаписей();
	Для Сч = 1 По КоличествоИгроков Цикл
		
		Юзер = "Игрок" + Сч;
		
		Запись = Набор.Добавить();
		Запись.Игрок = Юзер;
		Запись.Состояние = Перечисления.ДевБаттл_СостояниеИгрока[СостояниеИгроков];
		
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры   

Процедура УказатьСостояниеИгрока(Игрок, СостояниеИгрока) Экспорт
	
	Набор = РегистрыСведений.ДевБаттл_ТекущееСостояниеИгрока.СоздатьНаборЗаписей();
	Набор.Отбор.Игрок.Установить(Игрок);
	
	Запись = Набор.Добавить();
	Запись.Игрок = Игрок;
	Запись.Состояние = СостояниеИгрока;
	
	Набор.Записать();
	
КонецПроцедуры

Процедура ОчиститьВсе() Экспорт
	
	Регистры = Новый Массив;
	Регистры.Добавить("ДевБаттл_СписокЗаданий");
	Регистры.Добавить("ДевБаттл_ТекущееСостояниеИгрока");
	Регистры.Добавить("ДевБаттл_Результаты");
	
	Для Каждого Регистр Из Регистры Цикл
		
		РегистрыСведений[Регистр].СоздатьНаборЗаписей().Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьРаунд(НомерРаунда) Экспорт
	
	Константы.ДевБаттл_Раунд.Установить(НомерРаунда);
	
КонецПроцедуры              

Функция НоваяИгра_СписокЗадач(Простых, Средних, Сложных, ДопЗадания) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;       
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИТК_Задачи.Ссылка КАК Задача,
	               |	ИТК_Задачи.Баллы КАК Сложность
	               |ИЗ
	               |	Справочник.ИТК_Задачи КАК ИТК_Задачи
	               |ГДЕ
	               |	НЕ ИТК_Задачи.ПометкаУдаления
	               |	И ИТК_Задачи.Баллы >= 1
	               |	И ИТК_Задачи.Баллы <= 3
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сложность
	               |ИТОГИ ПО
	               |	Сложность";
	
	ВыборкаПоСложности = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДополнитьСписокЗадач(Результат, ВыборкаПоСложности.Строки[0].Строки, Простых);
	ДополнитьСписокЗадач(Результат, ВыборкаПоСложности.Строки[1].Строки, Средних);
	ДополнитьСписокЗадач(Результат, ВыборкаПоСложности.Строки[2].Строки, Сложных);
	
	// Финальный раунд                                                            
	ДополнитьСписокЗадач(Результат, ВыборкаПоСложности.Строки[1].Строки, ДопЗадания);
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьСписокЗадач(МассивЗадач, ВыгрузкаЗадач, КоличествоЗадач)
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	Для Сч = 1 По КоличествоЗадач Цикл
		
		НомерЗадачи = ГСЧ.СлучайноеЧисло(0, ВыгрузкаЗадач.Количество() - 1);
		МассивЗадач.Добавить(ВыгрузкаЗадач.Получить(НомерЗадачи).Задача);
		
		ВыгрузкаЗадач.Удалить(НомерЗадачи);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗакончитьИгру() Экспорт
	
	Константы.ДевБаттл_Раунд.Установить(0);
	РегистрыСведений.ДевБаттл_СписокЗаданий.СоздатьНаборЗаписей().Записать();
	ДевБаттл_РаботаВедущего.УказатьСостояниеИгроков("КонецИгры");
	
КонецПроцедуры

#Область Задачи_Игрокам

Процедура ЗаписатьЗадачиИгрокам(ЭтоДуэль, ПараметрыИгры) Экспорт 
	
	Если ЭтоДуэль Тогда
		
		ЗаписатьЗадачиИгрокамДуэель(ПараметрыИгры.Задания
									, ПараметрыИгры.ОжиданиеПервого
									, ПараметрыИгры.ОжиданиеВторого);
									
	Иначе
		
		ЗаписатьЗадачиИгрокамМультиплеер(ПараметрыИгры.Задания
									, ПараметрыИгры.КоличествоИгроков
									, ПараметрыИгры.Ожидание);
									
	КонецЕсли;
									
	
КонецПроцедуры

Процедура ЗаписатьЗадачиИгрокамДуэель(СписокЗадач, ТаймерПервого, ТаймерВторого) Экспорт 
	
	Игроки = Новый Массив;
	Игроки.Добавить("Игрок1");
	Игроки.Добавить("Игрок2");
	Индекс = 0;                                              
	Набор  = РегистрыСведений.ДевБаттл_СписокЗаданий.СоздатьНаборЗаписей();
	ВсегоЗадач = СписокЗадач.Количество();
	
	Для Сч = 1 По ВсегоЗадач - 1 Цикл // Последняя задача - финальная
		
		СтрокаТЧ = СписокЗадач.Получить(Сч - 1);
		
		
		Запись1 				= Набор.Добавить();
		Запись1.Игрок			= Игроки[Индекс];
		Запись1.НомерРаунда 	= Сч;
		Запись1.ВремяНаЗадачу	= СтрокаТЧ.ВремяНаЗадачу;
		Запись1.Задача			= СтрокаТЧ.Задача;
		Запись1.Отсрочка		= ТаймерПервого;
		
		Запись2					= Набор.Добавить();
		Запись2.Игрок			= Игроки[(Индекс + 1) % 2];
		Запись2.НомерРаунда		= Сч;
		Запись1.ВремяНаЗадачу	= СтрокаТЧ.ВремяНаЗадачу;
		Запись1.Задача			= СтрокаТЧ.Задача;
		Запись2.Отсрочка		= ТаймерВторого;               
		
		Индекс = (Индекс + 1) % 2;
			
	КонецЦикла;
	
	// Финальный раунд
	
	Задача = СписокЗадач.Получить(ВсегоЗадач - 1);
	
	Запись1 				= Набор.Добавить();
	Запись1.Игрок			= Игроки[Индекс];
	Запись1.НомерРаунда 	= Сч;
	Запись1.ВремяНаЗадачу	= СтрокаТЧ.ВремяНаЗадачу * 5;
	Запись1.Задача			= СтрокаТЧ.Задача;
	Запись1.Отсрочка		= ТаймерПервого;
		
	Запись2 =				Набор.Добавить();
	Запись2.Игрок			= Игроки[(Индекс + 1) % 2];
	Запись2.НомерРаунда		= Сч;
	Запись1.ВремяНаЗадачу	= СтрокаТЧ.ВремяНаЗадачу * 5;
	Запись1.Задача			= СтрокаТЧ.Задача;
	Запись2.Отсрочка		= ТаймерПервого;               
	
	Набор.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьЗадачиИгрокамМультиплеер(СписокЗадач, КоличествоИгроков, Ожидание) Экспорт 
	
	Игроки = Новый Массив;
	Для Сч = 1 По КоличествоИгроков Цикл
		
		Игроки.Добавить("Игрок" + Сч);
		
	КонецЦикла;

	Набор  = РегистрыСведений.ДевБаттл_СписокЗаданий.СоздатьНаборЗаписей();
	ВсегоЗадач = СписокЗадач.Количество();
	Раунд = 1;	
	Для Каждого СтрокаЗадание Из СписокЗадач Цикл
		
		Для Каждого Юзер Из Игроки Цикл
			
			Запись1 				= Набор.Добавить();
			Запись1.Игрок			= Юзер;
			Запись1.НомерРаунда 	= Раунд;
			Запись1.ВремяНаЗадачу	= СтрокаЗадание.ВремяНаЗадачу;
			Запись1.Задача			= СтрокаЗадание.Задача;
			Запись1.Отсрочка		= Ожидание;
			
		КонецЦикла;                           
		
		Раунд = Раунд + 1;
		
	КонецЦикла;
	
	Набор.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Правила_Игры

Процедура УстановитьПравилаИгры(ЭтоДуэль, ПараметрыИгры) Экспорт
	
	Если ЭтоДуэль Тогда
		
		Правила = ПравилаИгры_Дуэль(ПараметрыИгры);
		
	Иначе
		
		Правила = ПравилаИгры_Мультиплеер(ПараметрыИгры);
		
	КонецЕсли;
	
	Константы.ДевБаттл_ПравилаИгры.Установить(Правила);
	
КонецПроцедуры                                           

Функция ПравилаИгры_Дуэль(ПараметрыИгры)
	Шаблон = 
	"%1
	|На решение задачи дано %3
	|%5 (%6) секунд на ознакомление с заданием
	|Решаем по очереди ОДНУ И ТУ ЖЕ задачу
	|Первый игрок получает балл, если решит задачу
	|Второй игрок получает балл, если решит задачу БЫСТРЕЕ первого
	|Потом меняемся местами
	|Играем до победителя";
	
	Раундов		= ПараметрыИгры.Задания.Количество() - 1;
	РаундовСтр	= УИ_ОбщегоНазначенияКлиентСервер.СогласоватьСЧислительными(Раундов, "раунд, раунда, раундов");
	
	Длительность	= ПараметрыИгры.Задания[0].ВремяНаЗадачу;
	ДлительностьСтр	= УИ_ОбщегоНазначенияКлиентСервер.СогласоватьСЧислительными(Длительность, "секунда, секунды, секунд");
	
	Результат = СтрШаблон(Шаблон
							, РаундовСтр 
							, ДлительностьСтр
							, ПараметрыИгры.ОжиданиеПервого
							, ПараметрыИгры.ОжиданиеВторого);
							
	Возврат Результат;
	
КонецФункции

Функция ПравилаИгры_Мультиплеер(ПараметрыИгры)
	
	Шаблон = 
	"%1
	|%2
	|На решение задачи дано %3
	|%4 на ознакомление с заданием
	|Решаем ВСЕ ОДНОВРЕМЕННО задачу
	|Первый кто решит получает балл
	|Играем до победителя";
	
	Игроков		= ПараметрыИгры.КоличествоИгроков;
	ИгроковСтр	= УИ_ОбщегоНазначенияКлиентСервер.СогласоватьСЧислительными(Игроков, "игрок, игрока, игроков");
	
	Раундов		= ПараметрыИгры.Задания.Количество() - 3;
	РаундовСтр	= УИ_ОбщегоНазначенияКлиентСервер.СогласоватьСЧислительными(Раундов, "раунд, раунда, раундов");
	
	Длительность	= ПараметрыИгры.Задания[0].ВремяНаЗадачу;
	ДлительностьСтр	= УИ_ОбщегоНазначенияКлиентСервер.СогласоватьСЧислительными(Длительность, "секунда, секунды, секунд");
	
	Ожидание		= ПараметрыИгры.Ожидание;
	ОжиданиеСтр		= УИ_ОбщегоНазначенияКлиентСервер.СогласоватьСЧислительными(Ожидание, "секунда, секунды, секунд");
	
	Результат = СтрШаблон(Шаблон
							, ИгроковСтр 
							, РаундовСтр
							, Длительность
							, ОжиданиеСтр);
							
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Подсказки_Ведущему

Функция ПодсказкиВедущему(ЭтоДуэль, ПараметрыИгры) Экспорт
	
	Если ЭтоДуэль Тогда
		
		ПодсказкиВедущему = ПодсказкиВедущему_Дуэль(ПараметрыИгры.Задания);
		
	Иначе
		
		ПодсказкиВедущему = ПодсказкиВедущему_Мультиплеер(ПараметрыИгры.Задания);
		
	КонецЕсли;                                                     
	
	Возврат ПодсказкиВедущему;
	
КонецФункции 

Функция ПодсказкиВедущему_Дуэль(Задания)
	
	Результат = Новый Массив;	
	Результат.Добавить("НовыйРаунд");  
	
	Индекс = 0;
	Игроки = Новый Массив;
	Игроки.Добавить("Игрок1");
	Игроки.Добавить("Игрок2");
	
	Для Сч = 1 По Задания.Количество() - 1 Цикл // последний раунд финальный
		
		Результат.Добавить(Игроки[Индекс]);
		Результат.Добавить(Игроки[(Индекс + 1) % 2]);
		
		Результат.Добавить("НовыйРаунд");

		Индекс = (Индекс + 1) % 2;
			
	КонецЦикла;
	
	Результат.Добавить("ФинальныйРаунд");  
	
	Возврат Результат
	
КонецФункции

Функция ПодсказкиВедущему_Мультиплеер(Задания)
	
	Результат = Новый Массив;
	
	Для Сч = 1 По Задания.Количество()-3 Цикл // последний раунд финальный

		Результат.Добавить("НовыйРаунд");
		Результат.Добавить("НачатьИспытание");
			
	КонецЦикла;
	
	Результат.Добавить("ФинальноеИспытание");
	Результат.Добавить("ФинальноеИспытание");
	Результат.Добавить("ФинальноеИспытание");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти