
#Область ОписаниеПеременных

&НаКлиенте
Перем УИ_РедакторКодаКлиентскиеДанные Экспорт;

&НаКлиенте
Перем ПредыдущееСостояние;

&НаКлиенте
Перем ПодсказкаТаймера;

&НаКлиенте
Перем ТаймаутПроверитьСостояние;

&НаКлиенте
Перем ПроверятьРезультатСоперника;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПостановкаЗадачи = "<html><head></head><body><h3>Выбери задачу из списка...</h1></body>";
	
	УИ_РедакторКодаСервер.ФормаПриСозданииНаСервере(ЭтотОбъект);
	УИ_РедакторКодаСервер.СоздатьЭлементыРедактораКода(ЭтотОбъект, "Сервер", Элементы.ПолеАлгоритмаСервер);
	
	ИмяИгрока = ПараметрыСеанса.ИмяПользователя;
	ПравилаИгры = Константы.ДевБаттл_ПравилаИгры.Получить();
	
	Заголовок = ДевБаттл_ОбщегоНазначенияВызовСервера.ПацанскаяЦитата();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТаймаутПроверитьСостояние = 1;
	ПроверятьРезультатСоперника = Ложь;
	
	ПодключитьОбработчикОжидания("ОбновитьФормуПоСостоянию", ТаймаутПроверитьСостояние, Истина);  
	
	Элементы.ПолеАлгоритмаСервер.Доступность = Ложь;
	Элементы.ПроверитьРешение.Доступность = Ложь;
	УИ_РедакторКодаКлиент.ФормаПриОткрытии(ЭтотОбъект, Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект)); 
	
	ПодсказкаТаймера = Новый Массив;
	
	ПодсказкаТаймера.Добавить("Ознакомтесь с задачей");
	ПодсказкаТаймера.Добавить("Пишем код. Для проверки нажмите готово или Ctrl+Enter. Отладка(ЗНАЧ) - для вывода в окно отладки");
	
КонецПроцедуры                                                                                                      

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	УстановитьТекстРедактора("Сервер", "Сообщить(""Привет Мир"")", Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьРешение(Команда)
	
	ОтключитьОбработчикОжидания("ТаймерРешенияЗадачиЦикл");
	
	ТекстАлгоритмаСервер = УИ_РедакторКодаКлиент.ТекстКодаРедактора(ЭтотОбъект, "Сервер");
	СформироватьПротоколНаСервере();
	
	Если ВыполненУспешно Тогда
		
		Если ПроверятьРезультатСоперника 
				И СоперникЗавершилРаунд() Тогда
				
			ДевБаттл_РаботаИгрока.ИспытаниеОкончено(Ложь, ТаймерЗадача - Таймер);
			ВыполненУспешно = Ложь;
			
		Иначе
			
			ДевБаттл_РаботаИгрока.ИспытаниеОкончено(Истина, ТаймерЗадача - Таймер);
			
		КонецЕсли;
		
		ОбновитьФормуПоСостоянию();                        
		
	Иначе
		
		ПодключитьОбработчикОжидания("ТаймерРешенияЗадачиЦикл", 1);
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатыИгрокаНаСервере()
	
	РезультатИспытаний.Очистить();
	ТабДок = Отчеты.ДевБаттл_РезультатыИгры.РезультатыИспытаний(ПараметрыСеанса.ИмяПользователя);
	РезультатИспытаний.Вывести(ТабДок);
	
	ТекущийРаунд = Константы.ДевБаттл_Раунд.Получить();
	
	Заголовок = ДевБаттл_ОбщегоНазначенияВызовСервера.ПацанскаяЦитата();
	
КонецПроцедуры

&НаСервере
Процедура ВзятьЗадачуНаСервере()
	
	Задание = ДевБаттл_РаботаИгрока.ЗадачаИгрока();

	ДанныеЗадачи = УИ_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задание.Задача, "ПостановкаЗадачи, ШаблонКода, Тесты");	
	ПостановкаЗадачи = "<html><head></head><body><font size=""+2"">" + ДанныеЗадачи.ПостановкаЗадачи + "</font></body></html>";
	
	СписокТестов.Очистить();
	
	Для Каждого СтрокаТест Из ДанныеЗадачи.Тесты.Выгрузить() Цикл 
		
		НоваяСтрока = СписокТестов.Добавить();
		НоваяСтрока.Тест 			= СокрЛП(СтрокаТест.Тест);
		НоваяСтрока.Предустановка	= СокрЛП(СтрокаТест.Предустановка);
		НоваяСтрока.Представление	= СокрЛП(СтрокаТест.Представление);
		
	КонецЦикла;
	
	ТекстАлгоритмаСервер = ДанныеЗадачи.ШаблонКода;
	ПротоколТестирования = "";
	
	ТаймерОжидание	= Задание.Отсрочка;
	ТаймерЗадача 	= Задание.ВремяНаЗадачу;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстРедактора(ИдентификаторРедактора, ТекстАлгоритма, УстановитьОригинальныйТекст = Ложь)

	УИ_РедакторКодаКлиент.УстановитьТекстРедактора(ЭтотОбъект, ИдентификаторРедактора, ТекстАлгоритма, УстановитьОригинальныйТекст);

КонецПроцедуры

&НаСервере
Процедура СформироватьПротоколНаСервере()
	
	РезультатыТестирования  = Справочники.ИТК_Задачи.ПолучитьРезультатыТестирования(ТекстАлгоритмаСервер, СписокТестов);
	ПротоколТестирования 	= РезультатыТестирования.ПротоколТестирования;
	Отладка					= РезультатыТестирования.Отладка;
	ВыполненУспешно 		= РезультатыТестирования.ВыполненУспешно;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСостояниеИгрокаНаСервере()
	
	Возврат ДевБаттл_РаботаИгрока.ТекущееСостояние();
	
КонецФункции

&НаКлиенте
Процедура ОбновитьФормуПоСостоянию()
	
	ТекущееСостояние = ПолучитьСостояниеИгрокаНаСервере();
	
	Если ТекущееСостояние <> ПредыдущееСостояние Тогда
	
		Если ТекущееСостояние = ПредопределенноеЗначение("Перечисление.ДевБаттл_СостояниеИгрока.НачалоРаунда") Тогда
			
			ТаймаутПроверитьСостояние = 1;
			ПерейтиВНачалоРаунда();
			
		ИначеЕсли ТекущееСостояние = ПредопределенноеЗначение("Перечисление.ДевБаттл_СостояниеИгрока.ИспытаниеОдиночное") Тогда
			
			ТаймаутПроверитьСостояние = 15;
			ПроверятьРезультатСоперника = Ложь;
			ПерейтиВИспытание();
			
		ИначеЕсли ТекущееСостояние = ПредопределенноеЗначение("Перечисление.ДевБаттл_СостояниеИгрока.ИспытаниеОдновременное") Тогда
			
			ТаймаутПроверитьСостояние = 15;
			ПроверятьРезультатСоперника = Истина;
			ПерейтиВИспытание();

		ИначеЕсли ТекущееСостояние = ПредопределенноеЗначение("Перечисление.ДевБаттл_СостояниеИгрока.РезультатИспытания") Тогда
			
			ПерейтиВОкончаниеИспытания();
			
		ИначеЕсли ТекущееСостояние = ПредопределенноеЗначение("Перечисление.ДевБаттл_СостояниеИгрока.КонецИгры") Тогда
			
			ПерейтиВКонецИгры();
			
		// Спец команды
		ИначеЕсли ТекущееСостояние = ПредопределенноеЗначение("Перечисление.ДевБаттл_СостояниеИгрока.РезультатИспытанияВыполнено") Тогда
			
			Элементы.НадписьПровалено.Видимость = Ложь;
			Элементы.НадписьУспешно.Видимость	= Истина;
			
			Элементы.ГруппаСостояние.ТекущаяСтраница = Элементы.СтраницаРезультат;
			
		ИначеЕсли ТекущееСостояние = ПредопределенноеЗначение("Перечисление.ДевБаттл_СостояниеИгрока.РезультатИспытанияПровалено") Тогда
			
			Элементы.НадписьПровалено.Видимость = Истина;
			Элементы.НадписьУспешно.Видимость	= Ложь;
			
			Элементы.ГруппаСостояние.ТекущаяСтраница = Элементы.СтраницаРезультат;
		
		КонецЕсли;
		
		ПредыдущееСостояние = ТекущееСостояние;
		
	ИначеЕсли ТекущееСостояние = ПредопределенноеЗначение("Перечисление.ДевБаттл_СостояниеИгрока.ИспытаниеОдновременное")
			И ПроверятьРезультатСоперника 
			И СоперникЗавершилРаунд() Тогда
		
		ДевБаттл_РаботаИгрока.ИспытаниеОкончено(Ложь, ТаймерЗадача - Таймер);
		ОбновитьФормуПоСостоянию();
		
	КонецЕсли;
		
	ПодключитьОбработчикОжидания("ОбновитьФормуПоСостоянию", ТаймаутПроверитьСостояние, Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПерейтиВНачалоРаунда()
	
	ЗаполнитьРезультатыИгрокаНаСервере();
	ВыполненУспешно = Ложь;
	Отладка = "";
			
	Элементы.ГруппаСостояние.ТекущаяСтраница = Элементы.СтраницаНачалоРаунда;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВИспытание()
	
	ВзятьЗадачуНаСервере();
					
	УстановитьТекстРедактора("Сервер", ТекстАлгоритмаСервер);
	Элементы.ПолеАлгоритмаСервер.Доступность = Ложь;   
	Элементы.ПроверитьРешение.Доступность = Ложь;
	Элементы.ДекорацияЧтоДелать.Заголовок = ПодсказкаТаймера[0];
			
	Таймер = ТаймерОжидание;
	ПодключитьОбработчикОжидания("ТаймерОтсрочкиЦикл", 1);
			
	Элементы.ГруппаСостояние.ТекущаяСтраница = Элементы.СтраницаИспытание;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВОкончаниеИспытания()
	
	Элементы.НадписьПровалено.Видимость = Не ВыполненУспешно;
	Элементы.НадписьУспешно.Видимость = ВыполненУспешно;
			
	Элементы.ГруппаСостояние.ТекущаяСтраница = Элементы.СтраницаРезультат;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПерейтиВКонецИгры()
	
	Итоги = ДевБаттл_РаботаИгрока.ИтогиИгры();
	Элементы.НадписьСчетИгры.Заголовок		= Итоги.Счет;
	Элементы.НадписьПобедитель.Заголовок	= Итоги.Победитель;
			
	ПодключитьОбработчикОжидания("ЗавершитьИгру", 30 , Истина);   
	
	Элементы.ГруппаСостояние.ТекущаяСтраница = Элементы.СтраницаКонецИгры;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоперникЗавершилРаунд() 
	
	Возврат ДевБаттл_РаботаИгрока.ЕстьИгрокиЗавершившиеРаунд();		
		
КонецФункции

#КонецОбласти

#Область Таймеры

&НаКлиенте
Процедура ВывестиТаймер(ЗначениеТаймера)
	
	ТаймерСтрока = Формат('00010101000000' + ЗначениеТаймера, "ДФ=mm:ss");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаймерОтсрочкиЦикл()
	
	Таймер = Таймер- 1;
	ВывестиТаймер(Таймер);
	
	Если Таймер = 0 Тогда                         
		
		ОтключитьОбработчикОжидания("ТаймерОтсрочкиЦикл");
		Элементы.ПолеАлгоритмаСервер.Доступность = Истина;     
		Элементы.ПроверитьРешение.Доступность = Истина;
		ТекущийЭлемент = Элементы.ПолеАлгоритмаСервер;
		Элементы.ДекорацияЧтоДелать.Заголовок = ПодсказкаТаймера[1];
		
		Таймер = ТаймерЗадача;
		
		ПодключитьОбработчикОжидания("ТаймерРешенияЗадачиЦикл", 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаймерРешенияЗадачиЦикл()
	
	Таймер = Таймер - 1;
	ВывестиТаймер(Таймер);
	
	Если Таймер <= 0 Тогда     
		
		ОтключитьОбработчикОжидания("ТаймерРешенияЗадачиЦикл");
		ДевБаттл_РаботаИгрока.ИспытаниеОкончено(Ложь);
		ОбновитьФормуПоСостоянию();
		
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИгру()
	
	ЗавершитьРаботуСистемы(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеРедактораДокументСформирован(Элемент)
	УИ_РедакторКодаКлиент.ПолеРедактораHTMLДокументСформирован(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеРедактораПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	УИ_РедакторКодаКлиент.ПолеРедактораHTMLПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедакторКодаОтложеннаяИнициализацияРедакторов()
	УИ_РедакторКодаКлиент.РедакторКодаОтложеннаяИнициализацияРедакторов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_РедакторКодаЗавершениеИнициализации() Экспорт
	УстановитьТекстРедактора("Сервер", ТекстАлгоритмаСервер, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедакторКодаОтложеннаяОбработкаСобытийРедактора() Экспорт
	УИ_РедакторКодаКлиент.ОтложеннаяОбработкаСобытийРедактора(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти   

